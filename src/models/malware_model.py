import tensorflow as tf
from sklearn.ensemble import RandomForestClassifier
from tensorflow.keras import Sequential
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.layers import Dense
from tensorflow.keras.metrics import AUC
from tensorflow.keras.utils import to_categorical

from .model_architecture import ModelArchitecture


class MalwareModel(ModelArchitecture):
    def get_model(self):
        model = Sequential()
        model.add(Dense(units=64, activation="relu"))
        model.add(Dense(units=32, activation="relu"))
        model.add(Dense(units=32, activation="relu"))
        model.add(Dense(2, activation="softmax"))

        model.compile(
            optimizer=tf.keras.optimizers.Adam(0.001),
            loss="categorical_crossentropy",
            metrics=["accuracy", AUC()],
        )

        return model

    def get_trained_model(self, X, y, validation_data=None):

        model = self.get_model()
        es = EarlyStopping(
            monitor="val_loss", min_delta=0.001, patience=10, mode="min", verbose=1
        )
        model.fit(
            X,
            to_categorical(y),
            validation_data=validation_data,
            epochs=5,
            batch_size=128,
            callbacks=[es],
        )

        return model


class MalwareRf(ModelArchitecture):
    def get_model(self):
        model = RandomForestClassifier(n_estimators=100)
        return model

    def get_trained_model(self, X, y):
        model = self.get_model()
        model.set_params(
            **{
                "n_estimators": 100,
                "min_samples_split": 2,
                "min_samples_leaf": 1,
                "max_features": "sqrt",
                "max_depth": 90,
                "bootstrap": False,
            }
        )
        model.set_params(**{"verbose": 1})
        model.fit(X, y)
        model.set_params(**{"verbose": 0})
        return model
